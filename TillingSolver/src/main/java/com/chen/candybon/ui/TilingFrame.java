/*
 * Copyright (c) XIAOWEI CHEN, 2013.
 * All Rights Reserved. Reproduction in whole or in part is prohibited
 * without the written consent of the copyright owner.
 * 
 * All rights reserved.
 */
package com.chen.candybon.ui;

import com.chen.candybon.parser.InputParser;
import com.chen.candybon.solver.Solution;
import com.chen.candybon.solver.TilingSolver;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.UnsupportedEncodingException;
import java.util.List;
import javax.swing.JFileChooser;

public class TilingFrame extends javax.swing.JFrame {

    /**
     * Creates new form TilingFrame
     */
    public TilingFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        rotateCheckbox = new javax.swing.JCheckBox();
        flipCheckbox = new javax.swing.JCheckBox();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadInputMenu = new javax.swing.JMenuItem();
        exitMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rotateCheckbox.setText("Allow Rotate");
        rotateCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateCheckboxActionPerformed(evt);
            }
        });

        flipCheckbox.setText("Allow Flip");
        flipCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipCheckboxActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        loadInputMenu.setText("Load Input");
        loadInputMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInputMenuActionPerformed(evt);
            }
        });
        fileMenu.add(loadInputMenu);

        exitMenu.setText("Exit");
        exitMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenu);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(flipCheckbox)
                    .addComponent(rotateCheckbox))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(rotateCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(flipCheckbox)
                .addContainerGap(204, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuActionPerformed

    
    private void loadInputMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadInputMenuActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            InputParser parser = new InputParser();
            
            try {
                parser.parse(file);
                long timeStart = System.currentTimeMillis();
                TilingSolver solver = new TilingSolver(parser.getConfiguration(), parser.getPieceList());
                List<Solution> allSolutions = solver.solve(allowRotate, allowFlip);
                long timeEnd = System.currentTimeMillis();
                System.out.println("Time Taken : "+(timeEnd-timeStart) / 1000+" seconds");
                Displayer displayer = new Displayer(file.getParent(), parser.getConfiguration(), parser.getPieceList());
                displayer.display(allSolutions, (timeEnd-timeStart) / 1000);
            } catch (FileNotFoundException ex) {
                System.err.println("No file found to display the result!");
            } catch (UnsupportedEncodingException ex) {
                System.err.println("Result file encouding does not support.");
            }
        } else {
            System.out.println("Loading file aborted!");
        }
    }//GEN-LAST:event_loadInputMenuActionPerformed
    
    private boolean allowRotate = false;
    private void rotateCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateCheckboxActionPerformed
        allowRotate = rotateCheckbox.isSelected();
    }//GEN-LAST:event_rotateCheckboxActionPerformed

    private boolean allowFlip = false;
    private void flipCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipCheckboxActionPerformed
        allowFlip = flipCheckbox.isSelected();
    }//GEN-LAST:event_flipCheckboxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TilingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TilingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TilingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TilingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TilingFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem exitMenu;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JCheckBox flipCheckbox;
    private javax.swing.JMenuItem loadInputMenu;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JCheckBox rotateCheckbox;
    // End of variables declaration//GEN-END:variables
}
